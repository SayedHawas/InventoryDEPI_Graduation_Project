// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using smERP.Persistence.Data;

#nullable disable

namespace smERP.Persistence.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20240930051413_AddingStorageLocationIdToTransactions2")]
    partial class AddingStorageLocationIdToTransactions2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("smERP.Domain.Entities.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("smERP.Domain.Entities.ExternalEntities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("smERP.Domain.Entities.InventoryTransaction.AdjustmentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("StorageLocationId");

                    b.ToTable("AdjustmentTransactions");
                });

            modelBuilder.Entity("smERP.Domain.Entities.InventoryTransaction.ProcurementTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("StorageLocationId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProcurementTransactions");
                });

            modelBuilder.Entity("smERP.Domain.Entities.InventoryTransaction.SalesTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("StorageLocationId");

                    b.ToTable("SalesTransactions");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("StorageLocations");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.AttributeValue", b =>
                {
                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("AttributeId", "Id");

                    b.ToTable("AttributeValue");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsLeaf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShelfLifeInDays")
                        .HasColumnType("int");

                    b.Property<int?>("WarrantyInDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasFilter("[Sku] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sku"), false);

                    b.ToTable("ProductInstances");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductSupplier", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstTimeSupplied")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeSupplied")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSupplier");
                });

            modelBuilder.Entity("smERP.Domain.Entities.ExternalEntities.Supplier", b =>
                {
                    b.OwnsOne("smERP.Domain.ValueObjects.BilingualName", "Name", b1 =>
                        {
                            b1.Property<int>("SupplierId")
                                .HasColumnType("int");

                            b1.Property<string>("Arabic")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("SupplierId");

                            b1.HasIndex("Arabic");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("Arabic"), false);

                            b1.HasIndex("English");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("English"), false);

                            b1.ToTable("Suppliers");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.OwnsMany("smERP.Domain.ValueObjects.Address", "Addresses", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Comment")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SupplierId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("SupplierId");

                            b1.ToTable("SupplierAddresses", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.Navigation("Addresses");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.InventoryTransaction.AdjustmentTransaction", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Organization.StorageLocation", "StorageLocation")
                        .WithMany("AdjustmentTransactions")
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("smERP.Domain.Entities.InventoryTransaction.InventoryTransactionItem", "Items", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("TransactionId", "Id");

                            b1.HasIndex("ProductInstanceId");

                            b1.ToTable("AdjustmentTransactions_Items");

                            b1.HasOne("smERP.Domain.Entities.Product.ProductInstance", "ProductInstance")
                                .WithMany()
                                .HasForeignKey("ProductInstanceId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");

                            b1.Navigation("ProductInstance");
                        });

                    b.Navigation("Items");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("smERP.Domain.Entities.InventoryTransaction.ProcurementTransaction", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Organization.StorageLocation", "StorageLocation")
                        .WithMany("ProcurementTransactions")
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.ExternalEntities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("smERP.Domain.Entities.InventoryTransaction.InventoryTransactionItem", "Items", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("TransactionId", "Id");

                            b1.HasIndex("ProductInstanceId");

                            b1.ToTable("ProcurementTransactions_Items");

                            b1.HasOne("smERP.Domain.Entities.Product.ProductInstance", "ProductInstance")
                                .WithMany()
                                .HasForeignKey("ProductInstanceId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");

                            b1.Navigation("ProductInstance");
                        });

                    b.OwnsMany("smERP.Domain.Entities.InventoryTransaction.TransactionPayment", "Payments", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("PayedAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<DateTime>("PaymentDate")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetime2")
                                .HasDefaultValueSql("GETUTCDATE()");

                            b1.Property<string>("PaymentMethod")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TransactionId", "Id");

                            b1.ToTable("ProcurementTransactions_Payments");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Items");

                    b.Navigation("Payments");

                    b.Navigation("StorageLocation");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("smERP.Domain.Entities.InventoryTransaction.SalesTransaction", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Organization.StorageLocation", "StorageLocation")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("smERP.Domain.Entities.InventoryTransaction.InventoryTransactionItem", "Items", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("TransactionId", "Id");

                            b1.HasIndex("ProductInstanceId");

                            b1.ToTable("SalesTransactions_Items");

                            b1.HasOne("smERP.Domain.Entities.Product.ProductInstance", "ProductInstance")
                                .WithMany()
                                .HasForeignKey("ProductInstanceId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");

                            b1.Navigation("ProductInstance");
                        });

                    b.OwnsMany("smERP.Domain.Entities.InventoryTransaction.TransactionPayment", "Payments", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("PayedAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<DateTime>("PaymentDate")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("datetime2")
                                .HasDefaultValueSql("GETUTCDATE()");

                            b1.Property<string>("PaymentMethod")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TransactionId", "Id");

                            b1.ToTable("SalesTransactions_Payments");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Items");

                    b.Navigation("Payments");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Branch", b =>
                {
                    b.OwnsOne("smERP.Domain.ValueObjects.BilingualName", "Name", b1 =>
                        {
                            b1.Property<int>("BranchId")
                                .HasColumnType("int");

                            b1.Property<string>("Arabic")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("BranchId");

                            b1.HasIndex("Arabic");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("Arabic"), false);

                            b1.HasIndex("English");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("English"), false);

                            b1.ToTable("Branches");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.StorageLocation", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Organization.Branch", "Branch")
                        .WithMany("StorageLocations")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("smERP.Domain.Entities.Product.StoredProductInstance", "StoredProductInstances", b1 =>
                        {
                            b1.Property<int>("StorageLocationId")
                                .HasColumnType("int");

                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.HasKey("StorageLocationId", "ProductInstanceId");

                            b1.HasIndex("ProductInstanceId");

                            b1.ToTable("StoredProductInstance");

                            b1.HasOne("smERP.Domain.Entities.Product.ProductInstance", "ProductInstance")
                                .WithMany()
                                .HasForeignKey("ProductInstanceId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("StorageLocationId");

                            b1.OwnsMany("smERP.Domain.Entities.Product.ProductInstanceItem", "Items", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<DateOnly?>("ExpirationDate")
                                        .HasColumnType("date");

                                    b2.Property<int>("ProductInstanceId")
                                        .HasColumnType("int");

                                    b2.Property<string>("SerialNumber")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<string>("Status")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("StorageLocationId")
                                        .HasColumnType("int");

                                    b2.HasKey("Id");

                                    b2.HasIndex("SerialNumber");

                                    SqlServerIndexBuilderExtensions.IsClustered(b2.HasIndex("SerialNumber"), false);

                                    b2.HasIndex("StorageLocationId", "ProductInstanceId");

                                    b2.ToTable("ProductInstanceItem");

                                    b2.WithOwner()
                                        .HasForeignKey("StorageLocationId", "ProductInstanceId");
                                });

                            b1.Navigation("Items");

                            b1.Navigation("ProductInstance");
                        });

                    b.Navigation("Branch");

                    b.Navigation("StoredProductInstances");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Attribute", b =>
                {
                    b.OwnsOne("smERP.Domain.ValueObjects.BilingualName", "Name", b1 =>
                        {
                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<string>("Arabic")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("AttributeId");

                            b1.HasIndex("Arabic");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("Arabic"), false);

                            b1.HasIndex("English");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("English"), false);

                            b1.ToTable("Attributes");

                            b1.WithOwner()
                                .HasForeignKey("AttributeId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.AttributeValue", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Attribute", "Attribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("smERP.Domain.ValueObjects.BilingualName", "Value", b1 =>
                        {
                            b1.Property<int>("AttributeValueAttributeId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeValueId")
                                .HasColumnType("int");

                            b1.Property<string>("Arabic")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("AttributeValueAttributeId", "AttributeValueId");

                            b1.HasIndex("Arabic");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("Arabic"), false);

                            b1.HasIndex("English");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("English"), false);

                            b1.ToTable("AttributeValue");

                            b1.WithOwner()
                                .HasForeignKey("AttributeValueAttributeId", "AttributeValueId");
                        });

                    b.Navigation("Attribute");

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Brand", b =>
                {
                    b.OwnsOne("smERP.Domain.ValueObjects.BilingualName", "Name", b1 =>
                        {
                            b1.Property<int>("BrandId")
                                .HasColumnType("int");

                            b1.Property<string>("Arabic")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("BrandId");

                            b1.HasIndex("Arabic");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("Arabic"), false);

                            b1.HasIndex("English");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("English"), false);

                            b1.ToTable("Brands");

                            b1.WithOwner()
                                .HasForeignKey("BrandId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Category", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId");

                    b.OwnsOne("smERP.Domain.ValueObjects.BilingualName", "Name", b1 =>
                        {
                            b1.Property<int>("CategoryId")
                                .HasColumnType("int");

                            b1.Property<string>("Arabic")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("CategoryId");

                            b1.HasIndex("Arabic");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("Arabic"), false);

                            b1.HasIndex("English");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("English"), false);

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Product", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.Product.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("smERP.Domain.ValueObjects.BilingualName", "Name", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<string>("Arabic")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("English")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("ProductId");

                            b1.HasIndex("Arabic");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("Arabic"), false);

                            b1.HasIndex("English");

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("English"), false);

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductInstance", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductInstances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("smERP.Domain.Entities.Product.ProductInstanceAttributeValue", "ProductInstanceAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductInstanceId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeValueId")
                                .HasColumnType("int");

                            b1.HasKey("ProductInstanceId", "AttributeId", "AttributeValueId");

                            b1.HasIndex("AttributeId", "AttributeValueId");

                            b1.HasIndex("ProductInstanceId", "AttributeId")
                                .IsUnique();

                            SqlServerIndexBuilderExtensions.IsClustered(b1.HasIndex("ProductInstanceId", "AttributeId"), false);

                            b1.ToTable("ProductInstanceAttributeValue");

                            b1.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                            b1.WithOwner("ProductInstance")
                                .HasForeignKey("ProductInstanceId");

                            b1.HasOne("smERP.Domain.Entities.Product.AttributeValue", "AttributeValue")
                                .WithMany()
                                .HasForeignKey("AttributeId", "AttributeValueId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("AttributeValue");

                            b1.Navigation("ProductInstance");
                        });

                    b.Navigation("Product");

                    b.Navigation("ProductInstanceAttributeValues");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.ProductSupplier", b =>
                {
                    b.HasOne("smERP.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("smERP.Domain.Entities.ExternalEntities.Supplier", "Supplier")
                        .WithMany("SuppliedProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("smERP.Domain.Entities.ExternalEntities.Supplier", b =>
                {
                    b.Navigation("SuppliedProducts");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.Branch", b =>
                {
                    b.Navigation("StorageLocations");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Organization.StorageLocation", b =>
                {
                    b.Navigation("AdjustmentTransactions");

                    b.Navigation("ProcurementTransactions");

                    b.Navigation("SalesTransactions");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Attribute", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Category", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("smERP.Domain.Entities.Product.Product", b =>
                {
                    b.Navigation("ProductInstances");

                    b.Navigation("ProductSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
